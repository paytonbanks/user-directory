{"version":3,"sources":["utils/API.js","components/DataBody.js","components/DataTable.js","components/Nav.js","components/DataArea.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","DataBody","users","undefined","name","map","user","src","picture","large","alt","first","last","phone","email","age","DataTable","console","log","key","style","width","alignItems","Nav","handleSearch","type","onChange","e","DataArea","state","results","sort","filteredUsers","event","target","value","toLocaleLowerCase","filteredArr","filter","item","Object","values","join","indexOf","setState","API","then","res","data","catch","err","this","Component","Main","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"2PAEe,EACD,WACN,OAAOA,IAAMC,IAAI,mDCyBVC,MA3Bf,YAA8B,IAAVC,EAAS,EAATA,MAElB,OACE,oCACgBC,IAAbD,EAAM,SAAsCC,IAAlBD,EAAM,GAAGE,KAChCF,EAAMG,KAAI,SAACC,GACP,OACM,4BACI,4BACI,yBAAKC,IAAKD,EAAKE,QAAQC,MAAOC,IAAI,eAEtC,4BAAKJ,EAAKF,KAAKO,MAAf,IAAuBL,EAAKF,KAAKQ,MACjC,4BAAKN,EAAKO,OACV,4BAAKP,EAAKQ,OACV,4BAAKR,EAAKS,SAKxB,uCCYKC,MA9Bf,YAA8B,IAATd,EAAQ,EAARA,MAGjB,OACI,oCACA,+BACI,+BACI,4BALG,CAAC,CAACE,KAAM,SAAU,CAACA,KAAM,QAAS,CAACA,KAAK,SAAU,CAACA,KAAM,UAO7CC,KAAI,YAAc,IAAXD,EAAU,EAAVA,KAEZ,OADAa,QAAQC,IAAI,MAAOd,GAEf,wBACAe,IAAKf,EACHgB,MAAO,CAACC,MAAO,MAAOC,WAAY,WAEhC,8BAAOlB,SAO7B,kBAAC,EAAD,CAAUF,MAAOA,OCNdqB,MAlBf,YAAgC,IAAjBC,EAAgB,EAAhBA,aAEX,OACI,6BACG,6BACI,6BACI,8BACI,2BACKC,KAAK,SACLC,SAAU,SAAAC,GAAC,OAAIH,EAAaG,WCNnCC,E,4MACnBC,MAAQ,CACNC,QAAS,GACTC,KAAM,GACNC,cAAe,CAAC,K,EAelBR,aAAe,SAAAS,GACb,IAAMC,EAASD,EAAMC,OAAOC,MAAMC,oBAC5BC,EAAc,EAAKR,MAAMC,QAAQQ,QAAQ,SAAAC,GAE3C,OAAmC,IADtBC,OAAOC,OAAOF,GAAMG,KAAK,IAAIN,oBAC5BO,QAAQT,MAG1B,EAAKU,SAAS,CACZZ,cAAeK,K,kEApBE,IAAD,OAClBpB,QAAQC,IAAI,MACZ2B,IACCC,MAAK,SAAAC,GAAG,OAAI,EAAKH,SAAS,CACzBd,QAASiB,EAAIC,KAAKlB,QAClBE,cAAee,EAAIC,KAAKlB,aAEzBmB,OAAM,SAAAC,GAAG,OACNjC,QAAQC,IAAIgC,Q,+BAkBhB,OADAjC,QAAQC,IAAI,MAAOiC,KAAKtB,MAAMC,SAE5B,6BACA,kBAAC,EAAD,CACIN,aAAc2B,KAAK3B,eAEvB,kBAAC,EAAD,CACItB,MAAOiD,KAAKtB,MAAMG,qB,GAvCUoB,aCFjBC,E,uKAGjB,OACE,6BACI,kBAAC,EAAD,W,GALwBD,aCAnB,SAASE,IAAO,IAAD,EACJC,mBAAS,IADL,gCAEVA,mBAAS,KAFC,6BAI5B,OACE,6BACE,6BACE,gDAIF,6BACE,kBAAC,EAAD,QCHYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACT,EAAD,OAEFU,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.0ea7695e.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default {\n    getUsers: function () {\n        return axios.get(\"https://randomuser.me/api/?&results=200&nat=us\");\n    }\n};        \n","import React from \"react\";\n\nfunction DataBody({ users }) {\n\n  return (\n    <tbody>\n      {users[0] !== undefined && users[0].name !== undefined ? (\n          users.map((user) => {\n              return(\n                    <tr>\n                        <td>\n                            <img src={user.picture.large} alt=\"emp photo\" />\n                        </td>\n                        <td>{user.name.first} {user.name.last}</td>\n                        <td>{user.phone}</td>\n                        <td>{user.email}</td>\n                        <td>{user.age}</td>\n                    </tr>\n              )\n          })\n      ) : (\n          <></>\n      )\n      }\n    </tbody>\n      \n  )\n}\n\nexport default DataBody;\n","import React, { useHandle } from \"react\";\nimport DataBody from \"./DataBody\";\n\nfunction DataTable({ users }){\n\n    var headings = [{name: \"Image\"}, {name: \"Name\"}, {name:\"Phone\"}, {name: \"Email\"} ]\n    return(\n        <>\n        <table>\n            <thead>\n                <tr>\n                    {\n                      headings.map(({ name }) =>{\n                          console.log(\"obj\", name)\n                          return (\n                              <th\n                              key={name}\n                                style={{width: \"25%\", alignItems: \"center\", }}\n                              >\n                                  <span>{name}</span>\n                              </th>\n                          )\n                      })  \n                    }\n                </tr>\n            </thead>\n            <DataBody users={users} />\n        </table>\n      \n        </>\n    )\n}\n\nexport default DataTable\n","import React from 'react';\n\nfunction Nav({ handleSearch }) {\n   \n    return (\n        <nav>\n           <div>\n               <div>\n                   <form>\n                       <input\n                            type=\"search\"\n                            onChange={e => handleSearch(e)}\n                       />\n                   </form>\n               </div>\n           </div>\n        </nav>\n    );\n}\n\nexport default Nav;\n\n\n","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport DataTable from  \"./DataTable\";\nimport Nav from \"./Nav\";\n\nexport default class DataArea extends Component {\n  state = {\n    results: [],\n    sort: [],\n    filteredUsers: [{}] \n  }\n\n  componentDidMount() {\n    console.log(\"go\")\n    API.getUsers()\n    .then(res => this.setState({ \n      results: res.data.results,\n      filteredUsers: res.data.results\n    }))\n    .catch(err => \n        console.log(err)\n    );\n  }\n\n  handleSearch = event => {\n    const target = event.target.value.toLocaleLowerCase();\n    const filteredArr = this.state.results.filter( item => {\n        let values = Object.values(item).join(\"\").toLocaleLowerCase()\n        return values.indexOf(target) !== -1;\n    })\n\n    this.setState({\n      filteredUsers: filteredArr\n    })\n  };\n  \n  render() {\n    console.log(\"hey\", this.state.results)\n    return (\n      <div>\n      <Nav\n          handleSearch={this.handleSearch}\n      />\n      <DataTable \n          users={this.state.filteredUsers}\n      />\n      </div>\n    );\n  }\n};","import React, { Component } from \"react\";\nimport DataArea from \"./DataArea\";\n\nexport default class Main extends Component {\n   \n  render() {\n    return (\n      <div>\n          <DataArea/>\n      </div>\n    );\n  }\n};\n","import React, { useState } from 'react';\nimport Main from './components/Container';\n\nexport default function App() {\n  const [data, setData] = useState([]);\n  const [q, setQ] = useState(\"\");\n\n  return (\n    <div>\n      <div>\n        <nav>\n          USER DIRECTORY\n        </nav>\n      </div>\n      <div>\n        <Main />\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}